/*
 * -------------------------------------------------
 *  nf-core/qtlmap Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  // Container slug. Stable releases should specify release tag!
  //   Developmental code should specify :latest
  container = 'eqtlcatalogue/qtlmap:v20.05.1'

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags

  mincisvariant = 5 // Minimum count of cis variants in cis-distance of gene to be taken into account.
  is_imputed = true
  n_batches = 400
  cis_window = 1000000 // basepair count from middle of the gene to both directions
  n_permutations = 1000

  n_geno_pcs = 6
  n_pheno_pcs = 6
  run_permutation = false
  run_nominal = true
  reformat_summstats = true
  outdir = './results'

  readPaths = false
  // Boilerplate options
  name = false //Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic.
  email = false
  plaintext_email = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
// includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  standard {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  tartu_hpc { includeConfig 'conf/tartu_hpc.config'}
  test { includeConfig 'conf/test.config' }
  test_multi { includeConfig 'conf/test_multi.config' }
  eqtl_catalogue {
    includeConfig 'conf/tartu_hpc.config'
    includeConfig 'conf/eqtl_catalogue.config'
  }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_dag.svg"
}

manifest {
  name = 'nf-core/qtlmap'
  author = 'Nurlan Kerimov'
  homePage = 'https://github.com/nf-core/qtlmap'
  description = 'This pipeline mapping "Quantitive Trait Loci"-s'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
